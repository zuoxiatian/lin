<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.CustomerMapper">
	
	<cache type="org.mybatis.caches.ehcache.EhcacheCache">
		<property name="timeToLiveSeconds" value="3"/>
	</cache>
	
	<resultMap type="com.atguigu.mybatis.bean.Customer" id="customerMap2">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		
		<collection property="orders"
			ofType="com.atguigu.mybatis.bean.Order"
			column="id"
			select="com.atguigu.mybatis.mapper.OrderMapper.getOrders"></collection>
	</resultMap>
	<!--  
		演示如何通过额外的一条 SQL 来初始化集合属性. 
		1. 初始的 SQL 只查询当前数据表的数据. 而不再使用关联查询.
		2. 必须使用 resultMap, 而不能再使用 resultType.
		3. 正常映射已经查询到的属性.
		4. 使用 Collection 来映射关联的集合属性
		1). property 映射关联的集合属性名.
		2). 使用 ofType(而不是 javaType) 来指定集合中元素的类型!
		3). column 指定需要传入到下一条 SQL 中的列的名字. 
		4). select 指定额外的 SQL 语句. 
	-->
	<select id="get3" resultMap="customerMap2">
		SELECT c.id, Last_name
		FROM customers c
		WHERE c.id = #{id}
	</select>
	
	<select id="get2" resultType="com.atguigu.mybatis.bean.Customer" useCache="true">
		SELECT c.id, last_name
		FROM customers c
		WHERE c.id = #{id}
	</select>
	
	<resultMap type="com.atguigu.mybatis.bean.Customer" id="customerMap">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<!--  
			映射集合: 使用 collection 来映射集合. 
			property: 指定映射的集合元素的名字. 
			javaType: 指定集合中元素的类型. 
		-->
		<collection property="orders" javaType="com.atguigu.mybatis.bean.Order">
			<!-- id 映射 id -->
			<id column="o_id" property="id"/>
			<!-- result 映射一般属性. -->
			<result column="order_number" property="orderNumber"/>
		</collection>
	</resultMap>
	<!--  
		对于 "对多" 时, 不能通过别名的方式来初始化集合中的元素. 
		对于 "对多" 查询, 必须使用 resultMap, 而不能再使用 resultType!
	-->
	<select id="get" resultMap="customerMap">
		SELECT c.id, last_name, o.id AS "o_id", o.order_number, o.customer_id
		FROM customers c
		LEFT OUTER　JOIN orders o 
		ON c.id = o.customer_id
		WHERE c.id = #{id}
	</select>
	
</mapper>